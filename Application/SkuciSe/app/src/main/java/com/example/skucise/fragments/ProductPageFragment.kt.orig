package com.example.skucise.fragments

import android.content.Intent
import android.graphics.Color
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageButton
import android.widget.ImageView
import android.widget.TextView
import androidx.appcompat.widget.AppCompatButton
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.denzcoskun.imageslider.ImageSlider
import com.denzcoskun.imageslider.constants.ScaleTypes
import com.denzcoskun.imageslider.models.SlideModel
import com.example.skucise.LayoutActivities.EditProductActivities.EditProductActivity
import com.example.skucise.LayoutActivities.HomeScreenActivities.HomeScreenActivity
import com.example.skucise.LayoutActivities.LoginActivities.SessionManager
import com.example.skucise.LayoutActivities.ReservationActivities.ReservationActivity
import com.example.skucise.R
import com.example.skucise.adapter.CommentsAdapter
import com.example.skucise.adapter.DetailFieldsAdapter
import com.example.skucise.models.Advert
<<<<<<< HEAD
import com.example.skucise.models.AdvertDetails
=======
import com.example.skucise.models.AdvertImage
import com.example.skucise.models.Review
>>>>>>> dev
import com.example.skucise.repository.AdvertRepository
import com.example.skucise.repository.UserRepository
import com.example.skucise.utils.Constrants
import com.example.skucise.viewModels.UserViewModel
import com.example.skucise.viewModels.UserViewModelFactory
import com.example.skucise.viewModels.adverts.AdvertViewModel
import com.example.skucise.viewModels.adverts.AdvertViewModelFactory
import com.skyhope.showmoretextview.ShowMoreTextView
import com.squareup.picasso.Picasso
import kotlinx.android.synthetic.main.fragment_product_page.*

class ProductPageFragment : Fragment() {
    private lateinit var advertViewModel: AdvertViewModel

    private lateinit var recyclerViewComments: RecyclerView
    private lateinit var recyclerViewDetailFields: RecyclerView
    private lateinit var dataholderAdvert: Advert

    private var advertId: Long? = null
    private lateinit var sessionManager: SessionManager
    companion object {
        const val ARG_NAME = "advertId"

        fun newInstance(advertId: Long): ProductPageFragment {
            val fragment = ProductPageFragment()

            val bundle = Bundle().apply {
                putLong(ARG_NAME, advertId)
            }
            fragment.arguments = bundle

            return fragment
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        advertId = arguments?.getLong(ARG_NAME)
        return inflater.inflate(R.layout.fragment_product_page, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        init(view);
        toggleVisibleOrGoneKucniRed(view)
    }

    private fun init(view: View) {
        getRecyclerView(view)
        toggleFavButton(view)
        if (advertId != null) {
            dataholderAdvert = Advert();

            val advertRepository = AdvertRepository()
            val advertViewModelFactory = AdvertViewModelFactory(advertRepository)
            advertViewModel =
                ViewModelProvider(this, advertViewModelFactory).get(AdvertViewModel::class.java)


            advertViewModel.advert.observe(viewLifecycleOwner) { response ->
                if (response.isSuccessful) {
                    dataholderAdvert = response.body() as Advert
                    if (dataholderAdvert.advertDetails != null) {
                        setView(view);

                        recyclerViewComments.adapter = CommentsAdapter(dataholderAdvert.comments)

                        val detailFields = getDetailFields(dataholderAdvert.advertDetails!!)
                        recyclerViewDetailFields.adapter = DetailFieldsAdapter(detailFields)
                    } else {
                        Log.d("NullError", "Advert details cannot be null.")
                    }

                } else {
                    Log.d("ResponseError", response.errorBody().toString())
                }
            }
            advertViewModel.getAdvertById(advertId!!);
        }
    }

    private fun getDetailFields(advertDetails: AdvertDetails): ArrayList<String> {
        val detailFields: ArrayList<String> = arrayListOf()

        detailFields.add(advertDetails.squaredArea.toString() + "m kvadratna")
        if (advertDetails.floorNumber != 0) detailFields.add("Sprat " + advertDetails.floorNumber.toString())
        if (advertDetails.bedroomNumber != 0) detailFields.add(advertDetails.bedroomNumber.toString() + " spavaćih soba")
        if (advertDetails.kitchen) detailFields.add("Kuhinja")
        if (advertDetails.bathroom) detailFields.add("Kupatilo")
        if (advertDetails.terrace) detailFields.add("Terasa")
        if (advertDetails.parking) detailFields.add("Parking")
        if (advertDetails.wifi) detailFields.add("WIFI")
        if (advertDetails.tv) detailFields.add("TV")
        if (advertDetails.airCondition) detailFields.add("Klima uređaj")
        if (advertDetails.alarm) detailFields.add("Alarm")
        if (advertDetails.pool) detailFields.add("Bazen")
        if (advertDetails.firePlace) detailFields.add("Kamin")
        if (advertDetails.gym) detailFields.add("Teretana")

        return detailFields
    }

    private fun getRecyclerView(view: View) {
        val commentsLayoutManager =
            LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
        val detailFieldsLayoutManager =
            LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)

        recyclerViewComments = view.findViewById(R.id.recyclerViewRecenzije)
        recyclerViewDetailFields = view.findViewById(R.id.recyclerViewDetailFields)

        recyclerViewComments.layoutManager = commentsLayoutManager
        recyclerViewDetailFields.layoutManager = detailFieldsLayoutManager

        recyclerViewComments.isNestedScrollingEnabled = false;
        recyclerViewDetailFields.isNestedScrollingEnabled = false;
    }

    private fun setView(view: View) {
        val ownerName = view.findViewById<TextView>(R.id.oglasavacJe)
        val description = view.findViewById<ShowMoreTextView>(R.id.opis_oglasa)
        val homeOrder = view.findViewById<TextView>(R.id.kucniRedInvisible)
        val name = view.findViewById<TextView>(R.id.naslovProizvoda)
        val township = view.findViewById<TextView>(R.id.adresaProizvoda)
        val price = view.findViewById<TextView>(R.id.cenaProizvoda)
        val rating = view.findViewById<TextView>(R.id.ocenaProizvoda)
        val ratingsCount = view.findViewById<TextView>(R.id.ocenaKorisnika2)
        val userRatingsCount = view.findViewById<TextView>(R.id.ocenaKorisnika)
        val editButton = view.findViewById<ImageButton>(R.id.edit)
        val favButton = view.findViewById<ImageButton>(R.id.favorites)
        val backButton = view.findViewById<ImageButton>(R.id.back)
        val buttonReserve = view.findViewById<AppCompatButton>(R.id.dugme_zakazi)

        val imageSlider = view.findViewById<ImageSlider>(R.id.slikaProizvoda)
        val imageList = ArrayList<SlideModel>()
        //Constrants.BASE_URL + "/Images/AdvertImages/$photoUrl"

        for (item: AdvertImage in dataholderAdvert.advertImages!!) {
            imageList.add(SlideModel(Constrants.BASE_URL + "/Images/AdvertImages/${item.path}",""))
        }

        imageSlider.setImageList(imageList, ScaleTypes.FIT)
        imageSlider.stopSliding()

        description.setShowingLine(4)
        description.addShowMoreText("Prikazi vise");
        description.addShowLessText("Prikazi manje");
        description.setShowMoreColor(Color.BLUE)
        description.setShowLessTextColor(Color.BLUE)

<<<<<<< HEAD
        ("Oglasivac je " + dataholderAdvert.user!!.firstname).also { ownerName.text = it }
=======
        ("Oglasavac je " + dataholderAdvert.user!!.firstname).also { ownerName.text = it }
        Picasso.get().load(Constrants.BASE_URL + "/Images/UserImages/${dataholderAdvert.user!!.profileImage}").into(profile)
        Picasso.get().load(Constrants.BASE_URL + "/Images/UserImages/${dataholderAdvert.user!!.profileImage}").into(profileSecond)
        
>>>>>>> dev
        description.text = dataholderAdvert.advertDetails!!.description
        homeOrder.text = dataholderAdvert.advertDetails!!.houseOrder
        name.text = dataholderAdvert.name
        township.text = dataholderAdvert.advertDetails!!.township
<<<<<<< HEAD
=======
        description.text = dataholderAdvert.advertDetails!!.description
>>>>>>> dev
        (dataholderAdvert.price.toString() + "e").also { price.text = it }
        rating.text =
            if (dataholderAdvert.advertAverageRating != 0.0) dataholderAdvert.advertAverageRating.toString() else "N/A"

        if (dataholderAdvert.ratingsCount != 0) {
            (dataholderAdvert.ratingsCount.toString() + " recenzija oglasa").also {
                ratingsCount.text = it
            }
        } else {
            ratingsCount.text = "Nema recenzija oglasa"
            val showAllComments = view.findViewById<AppCompatButton>(R.id.showAllComments)
            showAllComments.visibility = View.GONE;
        }

        userRatingsCount.text =
            if (dataholderAdvert.user!!.ratingsCount != 0) dataholderAdvert.user!!.ratingsCount.toString() + " recenzija korisnika" else "Korisnik nije ocenjen"

        editButton.setOnClickListener(View.OnClickListener {
            editProduct()
        })

        favButton.setOnClickListener(View.OnClickListener {
            toggleFavButton(view)
        })

        backButton.setOnClickListener(View.OnClickListener {
            redirectHome()
        })

        buttonReserve.setOnClickListener(View.OnClickListener {
            redirectReservation()
        })
    }

    private fun redirectHome() {
        val intent = Intent(activity, HomeScreenActivity::class.java)
        startActivity(intent)
    }

    private fun editProduct() {
        val intent = Intent(activity, EditProductActivity::class.java)
        intent.putExtra("advertId", advertId)
        startActivity(intent)
    }

    private fun redirectReservation()
    {
        val intent = Intent(activity, ReservationActivity::class.java)
        startActivity(intent)
    }

    private var i: Int = 0
    private fun toggleFavButton(view: View) {

//
//        val advertRepository = AdvertRepository()
//        val advertViewModelFactory = AdvertViewModelFactory(advertRepository)
//        advertViewModel =
//            ViewModelProvider(this, advertViewModelFactory).get(AdvertViewModel::class.java)
//
//        advertViewModel.likes.observe(viewLifecycleOwner, { response ->
//            if (response.isSuccessful) {
//                var daLiJeLajkovano = response.body() as Boolean
//                val fav = view.findViewById<ImageView>(R.id.favorites)
//
//                if (daLiJeLajkovano) {
//                    fav.setBackgroundResource(R.drawable.ic_baseline_favorite_24)
//                } else {
//                    fav.setBackgroundResource(R.drawable.ic_baseline_favorite_border_24)
//                }
//
//            } else {
//                Log.d("ResponseError", response.errorBody().toString())
//            }
//        })
//        var session : SessionManager = SessionManager(view.context)
//        var hash : HashMap<String, String> = session.getUserDetails()
//        var userId = hash.get(SessionManager.KEY_ID)
//        advertViewModel.getLikeIfExist(userId.toString().toLong(), advertId!!);


    }

    private fun toggleVisibleOrGoneKucniRed(view: View) {
        val textViewKucniRed: TextView = view.findViewById(R.id.kucniRed)
        val textViewKucniRedInvisible: TextView = view.findViewById(R.id.kucniRedInvisible)

        textViewKucniRed.setOnClickListener(View.OnClickListener {

            if (textViewKucniRedInvisible.isVisible)
                textViewKucniRedInvisible.visibleOrInvisible(false)
            else textViewKucniRedInvisible.visibleOrInvisible(true)

        })
    }

    private fun View.visibleOrInvisible(visible: Boolean) {
        visibility = if (visible) View.VISIBLE else View.GONE
    }

    private fun View.toggleVisibility() {
        visibility = if (visibility == View.VISIBLE) {
            View.INVISIBLE
        } else {
            View.VISIBLE
        }
    }
}